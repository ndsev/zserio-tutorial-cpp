/**
 * Automatically generated by Zserio C++ extension version 2.2.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation.
 */

#ifndef TUTORIAL_EXPERIENCE_H
#define TUTORIAL_EXPERIENCE_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

#include <tutorial/Language.h>

namespace tutorial
{

class Experience
{
public:
    Experience() noexcept;

    explicit Experience(
            uint8_t yearsOfExperience_,
            ::tutorial::Language programmingLanguage_) :
            m_yearsOfExperience_(yearsOfExperience_),
            m_programmingLanguage_(programmingLanguage_)
    {
    }

    explicit Experience(::zserio::BitStreamReader& in);

    ~Experience() = default;

    Experience(const Experience&) = default;
    Experience& operator=(const Experience&) = default;

    Experience(Experience&&) = default;
    Experience& operator=(Experience&&) = default;

    uint8_t getYearsOfExperience() const;
    void setYearsOfExperience(uint8_t yearsOfExperience_);

    ::tutorial::Language getProgrammingLanguage() const;
    void setProgrammingLanguage(::tutorial::Language programmingLanguage_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const Experience& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    uint8_t readYearsOfExperience(::zserio::BitStreamReader& in);
    ::tutorial::Language readProgrammingLanguage(::zserio::BitStreamReader& in);

    uint8_t m_yearsOfExperience_;
    ::tutorial::Language m_programmingLanguage_;
};

} // namespace tutorial

#endif // TUTORIAL_EXPERIENCE_H
